name: CI/CD Pipeline

on:
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.image-tag.outputs.IMAGE_TAG }}
    permissions:
      id-token: write
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Build application
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::761018876037:role/github-actions-role
          aws-region: us-east-2
          role-session-name: GitHubActionsSession
          role-duration-seconds: 3600
          audience: sts.amazonaws.com

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and tag Docker image
        run: |
          echo "Building Docker image with commit SHA: ${{ github.sha }}"
          # Retry Docker build up to 3 times in case of Docker Hub issues
          for i in {1..3}; do
            if docker build --platform linux/amd64 -t nextjs-app .; then
              echo "Docker build successful on attempt $i"
              break
            else
              echo "Docker build failed on attempt $i"
              if [ $i -eq 3 ]; then
                echo "All build attempts failed"
                exit 1
              fi
              echo "Waiting 30 seconds before retry..."
              sleep 30
            fi
          done
          docker tag nextjs-app:latest 761018876037.dkr.ecr.us-east-2.amazonaws.com/nextjs-docker-aws:${{ github.sha }}
          docker tag nextjs-app:latest 761018876037.dkr.ecr.us-east-2.amazonaws.com/nextjs-docker-aws:latest
          echo "Tagged images:"
          docker images | grep nextjs-docker-aws

      - name: Push image to Amazon ECR
        run: |
          docker push 761018876037.dkr.ecr.us-east-2.amazonaws.com/nextjs-docker-aws:${{ github.sha }}
          docker push 761018876037.dkr.ecr.us-east-2.amazonaws.com/nextjs-docker-aws:latest

      - name: Output image tag
        id: image-tag
        run: echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install AWS CDK
        run: npm install -g aws-cdk

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::761018876037:role/github-actions-role
          aws-region: us-east-2
          role-session-name: GitHubActionsSession
          role-duration-seconds: 3600
          audience: sts.amazonaws.com

      - name: Install infrastructure dependencies
        run: |
          cd infrastructure
          npm ci

      - name: Show CDK diff
        run: |
          echo "Showing CDK diff with image tag: ${{ needs.build-and-push.outputs.image-tag }}"
          cd infrastructure
          npx cdk diff NextjsDockerAwsServiceStack --context imageTag=${{ needs.build-and-push.outputs.image-tag }}

      - name: Deploy service stack
        run: |
          echo "Deploying with image tag: ${{ needs.build-and-push.outputs.image-tag }}"
          cd infrastructure
          npx cdk deploy NextjsDockerAwsServiceStack --require-approval never --context imageTag=${{ needs.build-and-push.outputs.image-tag }}

      - name: Check current ECS service status
        run: |
          echo "Current ECS service status:"
          aws ecs describe-services \
            --cluster nextjs-docker-aws-cluster \
            --services $(aws ecs list-services --cluster nextjs-docker-aws-cluster --query 'serviceArns[0]' --output text | cut -d'/' -f3) \
            --query 'services[0].{TaskDefinition:taskDefinition,RunningCount:runningCount,DesiredCount:desiredCount,Deployments:deployments}'

      - name: Force ECS service update
        run: |
          echo "Forcing ECS service to use new task definition..."
          SERVICE_NAME=$(aws ecs list-services --cluster nextjs-docker-aws-cluster --query 'serviceArns[0]' --output text | cut -d'/' -f3)
          aws ecs update-service \
            --cluster nextjs-docker-aws-cluster \
            --service $SERVICE_NAME \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          echo "Waiting for ECS deployment to complete..."
          SERVICE_NAME=$(aws ecs list-services --cluster nextjs-docker-aws-cluster --query 'serviceArns[0]' --output text | cut -d'/' -f3)
          aws ecs wait services-stable \
            --cluster nextjs-docker-aws-cluster \
            --services $SERVICE_NAME
          echo "Deployment completed successfully!"
